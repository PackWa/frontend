import React, { useState, useEffect } from "react";
import {fetchProducts, createProduct, updateProduct, deleteProduct, fetchProductPhoto} from "../api/ProductService";
import {
  getAllProducts,
  blobToBase64,
  addProductDB,
  updateProductDB,
  deleteProductDB,
  clearProducts
} from "../services/database";
import AddProductModal from "../components/AddProductModal";
import photo from "../assets/camera_placeholder.jpg";
import ProductCard from "../components/ProductCard";
import SkeletonProductCard from "../components/SkeletonProductCard";
import SearchBar from "../components/SearchBar";

const Products = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [addModalOpen, setAddModalOpen] = useState(false);
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const token = localStorage.getItem("access_token");

    const filteredProducts = products.filter(product =>
        product.title.toLowerCase().includes(searchQuery.toLowerCase())
    );

    useEffect(() => {
        let isMounted = true;

        const loadProducts = async () => {
            try {
                setLoading(true);

                // –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const offlineProducts = await getAllProducts();
                if (isMounted && offlineProducts.length > 0) {
                    setProducts(offlineProducts);
                }

                // –®–∞–≥ 2: –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                if (navigator.onLine) {
                    try {
                        const serverProducts = await fetchProducts(token);

                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                        const processedProducts = await Promise.all(
                            serverProducts.map(async (product) => {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ –∫—ç—à–µ
                                const cachedProduct = offlineProducts.find(p => p.id === product.id);

                                if (cachedProduct?.photo === product.photo && cachedProduct.image) {
                                    return { ...product, image: cachedProduct.image };
                                }

                                if (product.photo) {
                                    try {
                                        const photoBlob = await fetchProductPhoto(token, product.photo);
                                        const base64 = await blobToBase64(photoBlob);
                                        return { ...product, image: base64 };
                                    } catch (error) {
                                        console.error("Error loading photo:", error);
                                        return product;
                                    }
                                }
                                return product;
                            })
                        );

                        // –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫—ç—à
                        if (isMounted) {
                            setProducts(processedProducts);
                            await clearProducts();
                            await Promise.all(processedProducts.map(p => addProductDB(p)));
                        }
                    } catch (error) {
                        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", error);
                    }
                }
            } finally {
                if (isMounted) setLoading(false);
            }
        };

        loadProducts();
        return () => { isMounted = false };
    }, [token]);

    const handleAddProduct = async (formData) => {
        console.log("FORM DATA CREATE PRODUCT", formData);
        try {
            const createdProduct = await createProduct(formData, token);
            if (createdProduct) {
                if (createdProduct.photo) {
                    try {
                        const photoBlob = await fetchProductPhoto(token, createdProduct.photo);
                        const base64Photo = await blobToBase64(photoBlob);
                        createdProduct.image = base64Photo;
                    } catch (error) {
                        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:", error);
                    }
                }
                setProducts(prev => [...prev, createdProduct]);
                await addProductDB(createdProduct);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
        }
    };

    const handleUpdateProduct = async (updatedProduct) => {
        if (!navigator.onLine) {
            alert("–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.");
            return;
        }

        try {
            const updated = await updateProduct(editingProduct.id, updatedProduct, token);
            if (updated) {
                if (updated.photo && updated.photo !== editingProduct.photo) {
                    try {
                        const photoBlob = await fetchProductPhoto(token, updated.photo);
                        const base64Photo = await blobToBase64(photoBlob);
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ image –≤ –æ–±—ä–µ–∫—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∞
                        updated.image = base64Photo;
                    } catch (error) {
                        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:", error);
                    }
                } else {
                    // –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ image
                    updated.image = editingProduct.image;
                }

                setProducts(prev =>
                    prev.map(p => p.id === updated.id ? updated : p)
                );
                await updateProductDB(updated);
            }
            setEditModalOpen(false);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
        }
    };

    const handleDeleteProduct = async (id) => {
        if (!navigator.onLine) {
            alert("–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.");
            return;
        }
        try {
            await deleteProduct(id, token);
            setProducts(prev => prev.filter(p => p.id !== id));
            await deleteProductDB(id);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
        }
    };

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;


  return (
      <div className="products-container">
        <h2>–ü—Ä–æ–¥—É–∫—Ç—ã</h2>
          <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} text={"üîç search"} /> {/* –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ */}
        <button className="add-product" onClick={() => setAddModalOpen(true)}>
          –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
        </button>

          <div className="products-grid">
              {loading ? (
                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 6 —Å–∫–µ–ª–µ—Ç–æ–Ω–æ–≤ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
                  Array.from({ length: 6 }).map((_, i) => (
                      <SkeletonProductCard key={`skeleton-${i}`} />
                  ))
              ) : (
                  filteredProducts.map(product => (
                      <ProductCard
                          key={product.id}
                          product={product}
                          onEdit={() => {
                              setEditingProduct(product);
                              setEditModalOpen(true);
                          }}
                          onDelete={handleDeleteProduct}
                      />
                  ))
              )}
          </div>

        <AddProductModal
            isOpen={addModalOpen}
            onClose={() => setAddModalOpen(false)}
            onSave={handleAddProduct}
        />

        <AddProductModal
            isOpen={editModalOpen}
            onClose={() => setEditModalOpen(false)}
            onSave={handleUpdateProduct}
            product={editingProduct}
        />
      </div>
  );
};

export default Products;
