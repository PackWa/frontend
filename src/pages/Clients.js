import React, { useState, useEffect } from "react";
import { fetchClients, createClient, updateClient, deleteClient } from "../api/ClientService";
import AddClientModal from "../components/AddClientModal";
import { getAllClients, addClient, deleteClientFromDB } from "../services/database";
import SearchBar from "../components/SearchBar";

const Clients = () => {
  const [clients, setClients] = useState([]);
  const [searchQuery, setSearchQuery] = useState(''); // –°—Ç–µ–π—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
  const [editingClient, setEditingClient] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [addModalOpen, setAddModalOpen] = useState(false);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const token = localStorage.getItem("access_token");

  useEffect(() => {
    const loadClients = async () => {
      if (!token) return;

      if (isOnline) {
        try {
          const clientsData = await fetchClients(token);
          setClients(clientsData);
          clientsData.forEach(addClient); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ IndexedDB
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:", error);
        }
      } else {
        const localClients = await getAllClients();
        setClients(localClients);
      }
    };

    loadClients();
  }, [token, isOnline]);

  const handleEdit = (client) => {
    setEditingClient(client);
    setModalOpen(true);
  };

  const handleDelete = async (id) => {
    if (!token) return;

    const isConfirmed = window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?");
    if (!isConfirmed) return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    if (isOnline) {
      const success = await deleteClient(id, token);
      if (success) {
        setClients(clients.filter(client => client.id !== id));
        deleteClientFromDB(id);
      }
    } else {
      setClients(clients.filter(client => client.id !== id));
      deleteClientFromDB(id);
    }
  };

  const handleSave = async () => {
    if (!token) return;
    const updatedClient = await updateClient(editingClient.id, editingClient, token);
    if (updatedClient) {
      setClients(clients.map(client => client.id === editingClient.id ? updatedClient : client));
      addClient(updatedClient);
    }
    setModalOpen(false);
  };

  const handleAddClient = async (newClient) => {
    if (!token) return;

    if (isOnline) {
      const createdClient = await createClient(newClient, token);
      if (createdClient) {
        setClients([...clients, createdClient]);
        addClient(createdClient);
      }
    } else {
      const tempClient = { ...newClient, id: Date.now() }; // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
      setClients([...clients, tempClient]);
      addClient(tempClient);
    }
  };

  const filteredClients = clients.filter((client) =>
      (client.first_name + " " + client.last_name + " " + client.phone)
          .toLowerCase()
          .includes(searchQuery.toLowerCase())
  );

  return (
    <div className="clients-container">
      <div className="controls">
        <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} text={"üîç search"} /> {/* –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ */}
        <button className="add-button" onClick={() => setAddModalOpen(true)}>
          –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
        </button>
      </div>
      <div className="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>–ò–º—è</th>
              <th>–§–∞–º–∏–ª–∏—è</th>
              <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
          {filteredClients.map((client) => ( // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
              <tr key={client.id}>
                <td>{client.first_name}</td>
                <td>{client.last_name}</td>
                <td>{client.phone}</td>
                <td>
                  <button onClick={() => handleEdit(client)}>edit</button>
                  <button style={{color: "red"}} onClick={() => handleDelete(client.id)}>delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {modalOpen && (
        <div className="modal">
          <div className="modal-content">
            <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞</h3>
            <input
              type="text"
              value={editingClient.first_name}
              onChange={(e) => setEditingClient({ ...editingClient, first_name: e.target.value })}
            />
            <input
              type="text"
              value={editingClient.last_name}
              onChange={(e) => setEditingClient({ ...editingClient, last_name: e.target.value })}
            />
            <input
              type="text"
              value={editingClient.phone}
              onChange={(e) => setEditingClient({ ...editingClient, phone: e.target.value })}
            />
            <button onClick={handleSave}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button onClick={() => setModalOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
        </div>
      )}

      <AddClientModal isOpen={addModalOpen} onClose={() => setAddModalOpen(false)} onSave={handleAddClient} />
    </div>
  );
};

export default Clients;